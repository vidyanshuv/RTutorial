a <- c(a, 1:3)
a
a = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
a <- c(a, 10)
a <- c(a, 11:15)
a
a = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
a <- c(a, 10, 11)
a <- c(a, 12:15)
a
a = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
a <- c(a, 10) # Adding 1 element
a <- c(a, 11, 12) # Adding multiple elements
a <- c(a, 13:15) # Adding a range of elements
# Adding values to Vector
a = c(1, 2, 3, 4, 5, 6, 7, 8, 9)
a <- c(a, 10) # Adding 1 element
a <- c(a, 11, 12) # Adding multiple elements
a <- c(a, 13:15) # Adding a range of elements
a
year <- c(1995, 1998, 1987, 2003)
names(year) <- c("Zoomer", "Ghoomer", "Blobber", "Striker")
year['Ghoomer']
year["Striker"]
year["Zoomer"]
year["Blobber"]
# length() function : Length of a vector
length(year)
year <- c(1995, 1998, 1987, 2003)
head(year)
head(year, 2)
tail(year)
tail(year, n =3)
year <- c(1995, 1998, 1987, 2003)
head(year)
head(year, 2)
tail(year)
tail(year, n =3)
year <- c(1995, 1998, 1987, 2003)
names(year) <- c("Zoomer", "Ghoomer", "Blobber", "Striker")
year['Ghoomer']
year["Striker"]
year["Zoomer"]
year["Blobber"]
# And you can retrieve the names of the vector using names()
names(year)
age <- c(12, 16, 18, NA, 22, NA, 8)
age
is.na(age)
mylist <- list("Name", 55L, 65.23, c("A", "B"))
mylist
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist[name]
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist$name
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist$name # Accessing list element bu it's name/key
mylist$year
mylist$genre
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist$name # Accessing list element bu it's name/key
mylist["year"]
mylist$genre
mylist <- list("Name", 55L, 65.23, c("A", "B"))
mylist
# Accessing element value
mylist[2]
mylist[1:3]
# _______List in Key value format____________
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist$name # Accessing list element by it's name/key with $ symbol
mylist["year"] # Accessing element by passing key in string format
# Appending new elements with name
mylist["Age Group"] <- 5L
mylist$Sequal <- TRUE
mylist
vect = c("A", "A", "A", "A", "A", "A", "A", "A", "A")
vect
vect = c("A", "A", "A", "A", "A", "A", "A", "A", "A")
my_arr = array(vect, dim = c(4,3))
my_arr
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_arr = array(vect, dim = c(4,3))
my_arr
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_arr = array(vect, dim = c(4,3))
my_arr
# Accessing array elements
my_arr[2,2]
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_arr = array(vect, dim = c(4,3))
my_arr
# Accessing array elements
my_arr[2,2] # returns value at 2*2
my_arr[1,]
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_arr = array(vect, dim = c(4,3))
my_arr
# Accessing array elements
my_arr[2,2] # returns value at row * column
my_arr[1,] # Fetches entire row of data
my_arr[,1] # Fetches entire column
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_mat = matrix(vect, 2, 5)
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_mat = matrix(vect, 3, 3)
my_mat
my_arr
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_mat = matrix(vect, nrow = 3, ncol = 3, byrow = F)
my_mat
my_mat = matrix(vect, nrow = 3, ncol = 3, byrow = T)
my_mat
my_arr
my_arr[2:3, 2:3]
my_mat
my_mat[2,3]
my_mat[2,]
my_mat[,2]
my_mat[2:3, 1]
dim(my_arr)
length_vector <- c(125, 81, 118, 81, 106, 121, 95, 100, 104)
length_array <- array(length_vector, dim = c(3,3))
length_array
length_array <- array(c(125, 81, 118, 81, 106, 121, 95, 100, 104), dim = c(3,3))
length_array
cls
length_array
mask_array
mask_array <- length_array < 120
mask_array
mask_array
x_array <- array(c("Akira", "Toy Story", "Room", "The Wave", "Whiplash",
"Star Wars", "The Ring", "The Artist", "Jumanji"), dim=c(3,3))
x_array
x_array[mask_array]
x_array[mask_array]
# ______________Data Frame______________
# --------------------------------------
# A data frame is a structure that contains correlated information
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham'),
Age = c(27, 29, 28, 26))
my_df
my_df$Name# Retrieve names from dataframe
my_df["Age"]
my_df[2] # Retrieve column number 2
my_df[1] # Retrieve column number 1
my_df[2] # Retrieve column number 2
my_df
my_df[2,1]
my_df[2,2] # Retrieve Anshu's Age from DF
# Structure str() function to retrieve structure of the data frame
str(my_df)
# Structure str() function to retrieve structure of the data frame
str(my_df)
tail(my_df) # Last 6 elements of DF
# head() and tail() functions
head(my_df) # first 6 elements of DF
# ______________Data Frame______________
# --------------------------------------
# A data frame is a structure that contains correlated information
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham', 'Kaushtubh', 'Akhil', 'Vineet', 'Puneet'),
Age = c(27, 29, 28, 26, 28, 28, 30, 25))
my_df
tail(my_df)
head(my_df)
tail(my_df) # Last 6 elements of DF
# head() and tail() functions
head(my_df) # first 6 elements of DF
# Inserting new column to the DF
my_df['Is Smart'] <- c(T, T, F, F, T, T, F, T)
my_df
my_df
my_df
# Inserting new column to the DF
my_df['Is_Smart'] <- c(T, T, F, F, T, T, F, T)
my_df
# Inserting new row using rbind()
my_df <- rbind(my_df, c(Name = "Satyam", Age = 28, Is_Smart = T))
my_df
# ______________Data Frame______________
# --------------------------------------
# A data frame is a structure that contains correlated information
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham', 'Kaushtubh', 'Akhil', 'Vineet', 'Puneet'),
Age = c(27, 29, 28, 26, 28, 28, 30, 25))
# Inserting new row using rbind()
my_df <- rbind(my_df, c(Name = "Satyam", Age = 28, Is_Smart = T, ))
# ______________Data Frame______________
# --------------------------------------
# A data frame is a structure that contains correlated information
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham', 'Kaushtubh', 'Akhil', 'Vineet', 'Puneet'),
Age = c(27, 29, 28, 26, 28, 28, 30, 25))
my_df
# Inserting new column to the DF
my_df['Is_Smart'] <- c(T, T, F, F, T, T, F, T)
# Inserting new row using rbind()
my_df <- rbind(my_df, c(Name = "Satyam", Age = 28, Is_Smart = T ))
my_df
my_df
# Deleting rows from DF
my_df[-9,]
# Deleting column from DF
my_df[, -3]
my_df\
my_df
# Deleting rows from DF
my_df <- my_df[-9,]
# Deleting column from DF
my_df <- my_df[, -3]
my_df
# _____________LISTS_____________
# List is a data structure similar to vector but unlike vector it can contain any type of data at the same time.
mylist <- list("Name", 55L, 65.23, c("A", "B"))
mylist
# Accessing element value
mylist[2]
mylist[1:3]
# _______List in Key value format____________
mylist = list(name = "Toy Story",
year = 1995,
genre = c("Child", "Animated", "Comedy"))
mylist$name # Accessing list element by it's name/key with $ symbol
mylist["year"] # Accessing element by passing key in string format
# Appending new elements with name
mylist["Age Group"] <- 5L
mylist$Sequal <- TRUE
mylist
# To delete a value from list use "NULL" value e.g.
mylist$Sequal <- NULL
# _____________ Arrays___________________
# ---------------------------------------
# An array is a single or multidimensional structure containing data of same type.
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_arr = array(vect, dim = c(4,3))
my_arr
dim(my_arr)
# Accessing array elements
my_arr[2,2] # returns value at row * column
my_arr[1,] # Fetches entire row of data
my_arr[,1] # Fetches entire column
my_arr[2:3, 2:3] # Fetches common element between Row slice and Column slice
# Output:: my_arr[2:3, 2:3]
# [,1]       [,2]
# [1,] "Anshu"    "Ankit"
# [2,] "Alankrit" "Aman"
# Subset Array with Logical array
length_array <- array(c(125, 81, 118, 81, 106, 121, 95, 100, 104), dim = c(3,3))
length_array
mask_array <- length_array < 120
mask_array
x_array <- array(c("Akira", "Toy Story", "Room", "The Wave", "Whiplash",
"Star Wars", "The Ring", "The Artist", "Jumanji"), dim=c(3,3))
x_array[mask_array] # this created a subset array of x_array using mask array.
# _____________Matrix________________
# -----------------------------------
# Matrices are a sub-type of arrays. A matrix must have 2 dimensions, whereas arrays are more flexible and can have, one, two, or more dimensions.
vect = c("Ankit", "Aman", "Akash", "Akshit", "Ankur", "Anshu", "Alankrit", "Abhushan", "Akshunn")
my_mat = matrix(vect, nrow = 3, ncol = 3, byrow = T) # byrow = T means data will be written from left to write else it is written top to bottom (column first)
my_mat[2,3]
my_mat[2,]
my_mat[,2]
my_mat[2:3, 1]
# ______________Data Frame______________
# --------------------------------------
# A data frame is a structure that contains correlated information
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham', 'Kaushtubh', 'Akhil', 'Vineet', 'Puneet'),
Age = c(27, 29, 28, 26, 28, 28, 30, 25))
my_df$Name # Retrieve names column from data frame
my_df["Age"] # Retrieve Age Column
my_df[1] # Retrieve column number 1
my_df[2] # Retrieve column number 2
my_df[2,1] # Retrieve Anshu from DF
my_df[2,2] # Retrieve Anshu's Age from DF
# Structure str() function to retrieve structure of the data frame
str(my_df)
# head() and tail() functions
head(my_df) # first 6 elements of DF
tail(my_df) # Last 6 elements of DF
# Inserting new column to the DF
my_df['Is_Smart'] <- c(T, T, F, F, T, T, F, T)
my_df
# Inserting new row using rbind()
my_df <- rbind(my_df, c(Name = "Satyam", Age = 28, Is_Smart = T ))
# Deleting rows from DF
my_df <- my_df[-9,]
# Deleting column from DF
my_df <- my_df[, -3] # can also be done by assigning NULL value to column name e.g. my_df[is_Smart] <- NULL
mylist
mylist["name"] = "Pokemon"
mylist
mylist[name] = "Ash Ketchum"
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
break
}
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
print("Breaking the loop")
break
}
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
next
}
print(i)
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
print("Using next to skip iteration at i==3")
next # Skipping the iteration for i==3
}
print(i)
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
print("Using next to skip iteration at i==3")
next # Skipping the iteration for i==3
}
print(i)
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
print("Using next to skip iteration at i==3")
next # Skipping the iteration for i==3
}
print(i)
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
print("Breaking the loop") # The loop will stop at 3 because we have chosen to finish the loop by using the break statement when i is equal to 4 (i == 4).
break
}
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
print("This is how Loop works in R")
print("Loop")
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
print("Using next to skip iteration at i==3")
next # Skipping the iteration for i==3
}
print(i)
}
for (x in 1:10) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
my_vect <- c(20, 30, 22, 44, 57, 89)
for(x in my_vect){
print("Printing vector elements after adding 10 to each element")
print(x+10)
}
my_vect <- c(20, 30, 22, 44, 57, 89)
print("Printing vector elements after adding 10 to each element")
for(x in my_vect){
print(x+10)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if(x == "banana"){
break
}
print(x)
}
for (x in fruits) {
if(x == "banana"){
next
}
print(x)
}
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for (x in adj) {
for (y in fruits) {
print(paste(x, y))
}
}
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham', 'Kaushtubh', 'Akhil', 'Vineet', 'Puneet'),
Age = c(27, 29, 28, 26, 28, 28, 30, 25))
my_df
my_df[2]$Age
my_df[2]$Name
my_df[1]$Name
my_df$Name
my_df$Name
my_df[1]
my_df[2]
printHelloWorld <- function(){
print("Using function to print Hello world")
}
printHelloWorld()
printHelloWorld()
printHelloWorld()
add(3, 4)
add <- function(x, y){
x + y
}
add(3, 4)
add_ret <- function(x, y){
sum <- x + y
return(sum)
}
add_ret(30, 41)
add_ret <- function(x, y){
sum <- x + y
#return(sum)
}
add_ret(30, 41)
add_ret <- function(x, y){
sum <- x + y
return(sum)
}
add_ret(30, 41)
source("~/R_Tutorial/Functions.R")
x
x
source("~/R_Tutorial/Functions.R")
xglo
source("~/R_Tutorial/Functions.R")
source("~/R_Tutorial/Functions.R")
xglo
yloc
myfunc <- function(){
xglo <<- "Global" # A global variable, assignment is done with <<- or ->>
yloc <- 9L # A local variable
print("This was a demonstration")
}
print(xglo)
myfunc <- function(){
xglo <<- "Global"
yloc <- 9L # A local variable
print("This was a demonstration")
}
print(xglo)
myfunc()
xglo
yloc
Nested_function <- function(x, y) {
a <- x + y
return(a)
}
Nested_function(Nested_function(2,2), Nested_function(3,3))
Outer_func <- function(x) {
Inner_func <- function(y) {
a <- x + y
return(a)
}
return (Inner_func)
}
output <- Outer_func(3) # To call the Outer_func
output(5)
tri_recursion <- function(k) {
if (k > 0) {
result <- k + tri_recursion(k - 1)
print(result)
} else {
result = 0
return(result)
}
}
tri_recursion(6)
