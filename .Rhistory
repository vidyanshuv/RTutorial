print(i)
}
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
print("Using next to skip iteration at i==3")
next # Skipping the iteration for i==3
}
print(i)
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
if (i == 4) {
print("Breaking the loop") # The loop will stop at 3 because we have chosen to finish the loop by using the break statement when i is equal to 4 (i == 4).
break
}
}
i <- 1
while (i < 6) {
print(i)
i <- i + 1
}
print("This is how Loop works in R")
print("Loop")
i <- 0
while (i < 6) {
i <- i + 1
if (i == 3) {
print("Using next to skip iteration at i==3")
next # Skipping the iteration for i==3
}
print(i)
}
for (x in 1:10) {
print(x)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
print(x)
}
my_vect <- c(20, 30, 22, 44, 57, 89)
for(x in my_vect){
print("Printing vector elements after adding 10 to each element")
print(x+10)
}
my_vect <- c(20, 30, 22, 44, 57, 89)
print("Printing vector elements after adding 10 to each element")
for(x in my_vect){
print(x+10)
}
fruits <- list("apple", "banana", "cherry")
for (x in fruits) {
if(x == "banana"){
break
}
print(x)
}
for (x in fruits) {
if(x == "banana"){
next
}
print(x)
}
adj <- list("red", "big", "tasty")
fruits <- list("apple", "banana", "cherry")
for (x in adj) {
for (y in fruits) {
print(paste(x, y))
}
}
my_df <- data.frame(Name = c('Ankit', 'Anshu', 'Rakesh', 'Shubham', 'Kaushtubh', 'Akhil', 'Vineet', 'Puneet'),
Age = c(27, 29, 28, 26, 28, 28, 30, 25))
my_df
my_df[2]$Age
my_df[2]$Name
my_df[1]$Name
my_df$Name
my_df$Name
my_df[1]
my_df[2]
printHelloWorld <- function(){
print("Using function to print Hello world")
}
printHelloWorld()
printHelloWorld()
printHelloWorld()
add(3, 4)
add <- function(x, y){
x + y
}
add(3, 4)
add_ret <- function(x, y){
sum <- x + y
return(sum)
}
add_ret(30, 41)
add_ret <- function(x, y){
sum <- x + y
#return(sum)
}
add_ret(30, 41)
add_ret <- function(x, y){
sum <- x + y
return(sum)
}
add_ret(30, 41)
source("~/R_Tutorial/Functions.R")
x
x
source("~/R_Tutorial/Functions.R")
xglo
source("~/R_Tutorial/Functions.R")
source("~/R_Tutorial/Functions.R")
xglo
yloc
myfunc <- function(){
xglo <<- "Global" # A global variable, assignment is done with <<- or ->>
yloc <- 9L # A local variable
print("This was a demonstration")
}
print(xglo)
myfunc <- function(){
xglo <<- "Global"
yloc <- 9L # A local variable
print("This was a demonstration")
}
print(xglo)
myfunc()
xglo
yloc
Nested_function <- function(x, y) {
a <- x + y
return(a)
}
Nested_function(Nested_function(2,2), Nested_function(3,3))
Outer_func <- function(x) {
Inner_func <- function(y) {
a <- x + y
return(a)
}
return (Inner_func)
}
output <- Outer_func(3) # To call the Outer_func
output(5)
tri_recursion <- function(k) {
if (k > 0) {
result <- k + tri_recursion(k - 1)
print(result)
} else {
result = 0
return(result)
}
}
tri_recursion(6)
Nested_function(Nested_function(2,2), Nested_function(3,3))
summary <- readLines("stringoperations.txt")
summary <- readLines("stringoperation.txt")
summary <- readLines("stringoperation.txt")
summary
# Reading number of characters in string
nchar(summary[1])
# Upper case conversion
toupper(summary[1])
tolower(summary[1])
# Replacing substring
chartr(" ", ".", summary[1])
# Splitting a string
char_list <- strsplit(summary[1], " ")
char_list
word_list <- unlist(xhar_list)
word_list <- unlist(char_list)
word_list
# Sorting word_list variable
sorted_word <- sort(word_list)
sorted_word
# Concatinating the word_list
paste(sorted_word, " ")
# Concatinating the word_list
paste(sorted_word, collapse = " ")
# Extracting a sub-string
subs = substr(summary[1], start = 4, stop = 30)
subs
# Removing Whitespace from a string
trimws(subs)
# Slicing last 8 characters
str8 = substr(summary[1], start = -8, -1)
str8
# Slicing last 8 characters
str8 = str_sub(summary[1], start = -8, -1)
# Slicing last 8 characters
library(stringr)
# Slicing last 8 characters
library(stringr)
str8 = str_sub(summary[1], start = -8, -1)
str8
install.packages('RMySQL', repos='http://cran.us.r-project.org')
cls
.libPaths()
# GREP() to find a substring
grep("@.*", c("anshuraj132@gmail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"))
# GREP() to find a substring
grep("@.*", c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"))
# Print the matching string
grep("@.*", c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"), value = T)
# Replacing a sub-string after performing a search with pattern
gsub("@.*", "@vcodingonline.com",c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"))
# using regexpr() and regmatches() to extract and match substrings
matched <- regexpr("@.*", c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"))
regmatches(c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"), matched)
source("~/R_Tutorial/tryCatch.R")
source("~/R_Tutorial/tryCatch.R")
tryCatch(10 + "a", error = function(e)
print("oops there was an error"))
tryCatch(
for(i in 1:13){
paste("No issues so far", i)
}, error = function(e) paste("Error Occured: ", e)
)
tryCatch(
for(i in 1:13){
i <- 1+"a"
paste("No issues so far", i)
}, error = function(e) paste("Error Occured: ", e)
)
# Catching Warnings
tryCatch(as.integer("a"), warning = function(e)
paste("Warning !!!:", e))
# Reading CSV files
csv_data <- read.csv(testData.csv)
# Reading CSV files
csv_data <- read.csv("testData.csv")
csv_data
install.packages("readxl")
# Reading Excel file
library(readxl)
xl_data <- read_xlsx("testData.xlsx")
xl_data <- read_excel("testData.xlsx")
xl_data
xl_data <- read_excel("testData.xlsx")
xl_data
csv_data$User
csv_data$Country
csv_data$Country[4] <- "Korea"
csv_data
csv_data[1, "User", "Email"]
csv_data[1, c("User", "Email")]
xl_data$User
xl_data$Country[4] <- "Korea"
xl_data[1, c("User", "Email")]
xl_data
# Accessing built-in data sets
data()
help(co2)
co2_data = help(co2)
co2_data
# Reading text files
text <- readLines("stringoperation.txt")
text
text[1]
toupper(text[1])
length(text)
length(text)
nchar(text)
file.size("stringoperation.txt")
# Reading text file word by word
test_word <- scan("stringoperation.txt", "")
test_word
m <- matrix(c(1,2,3,4,5,6), 2, 3)
m
write(m, file="matrix.txt", ncolumns = 3, sep = " ")
write(m, file="matrix.txt", ncolumns = 3, sep = " ") # Writes to existing file or created one if not there already
summary(csv_data)
# Writing to CSV file
write.csv(csv_data, file = "TDataCopy.csv", row.names = F)
write.table(csv_data, file = "TDataCopy.csv", row.names = F, col.names = F, sep = ",")
# Writing to CSV file
write.csv(csv_data, file = "TDataCopy.csv", row.names = F)
write.table(csv_data, file = "TDataCopyTable.csv", row.names = F, col.names = F, sep = ",")
install.packages(xlsx)
install.packages("xlsx")
install.packages("xlsx"))
install.packages("xlsx")
# Writing to excel files
install.packages("xlsx")
library(xlsx)
source("~/R_Tutorial/FileReadWriteOperations.R")
source("~/R_Tutorial/FileReadWriteOperations.R")
library(xlsx) # Needs java (jre) to be installed & have JAVA_HOME variable in path
write.xlsx(csv_data, file = "TDataCopy.csv", sheetName = "Sheet1", col.names = T, row.names = F)
# Saving R objects in .RData files
save(list = c("Var1", "Var2", "Var3"), file = "vars.RData", safe = T)
l = c("a", "b")
l
# Saving R objects in .RData files
save(list = c("Var1", "Var2", "Var3"), file = "vars.RData", safe = T)
# Saving R objects in .RData files
lis = c("var1", "var2", "var3")
save(lis, file = "vars.RData", safe = T)
# CSV file
download.file("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0101EN-Coursera/v2/dataset/movies-db.csv",
destfile="movies-db.csv")
# XLS file
download.file("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-RP0101EN-Coursera/v2/dataset/movies-db.xls",
destfile="movies-db.xls")
install.packages("httr")
library(httr)
response
# Making HTTP request
url<-'https://www.ibm.com/'
response<-GET(url)
response
response$status
response_headers <- headers(response)
response_headers
response_headers['date']
response_headers['content-type']
response$request$headers
response_headers['content-length']
content(response)
source("~/R_Tutorial/Requests&WebScrapping.R")
summary(response)
str(response)
# Sending get response to download an image
image_url<-'https://gitlab.com/ibm/skills-network/courses/placeholder101/-/raw/master/labs/module%201/images/IDSNlogo.png'
image_response<-GET(image_url)
image_headers <- headers(image_response)
image_headers['content-type']
# An image is a response object that contains the image as a bytes-like object. As a result, we must save it using a file object. First, we specify the file path and name
image <- content(image_response, "raw")
writeBin(image, "logo.png")
# GET request with URL Parameters
url_get <- 'http://httpbin.org/get'
query_params <- list(name = "Yan", ID = "123")
response <- GET(url_get, query=query_params)
response$request$url
content(response)$args
# POST Requests
url_post <- 'http://httpbin.org/post'
query_params <- list(name = "vvishal", ID = "123")
response <- GET(url_get, query=query_params)
response$request$url
content(response)$args
# POST Requests
url_post <- 'http://httpbin.org/post'
body<- list(course_name='Introduction to R', instructor='vvishal')
response<-POST('http://httpbin.org/post', body = body)
response
response$request$fields
# ______________Web Scrapping___________
# --------------------------------------
install.packages("rvest")
library(rvest)
library(httr)
simple_html_text <- "
<html>
<body>
<p>This is a test html page</p>
</body>
</html>"
# Create the root html node by reading the simple HTML string
root_node <- read_html(simple_html_text)
root_node
root_node
class(root_node)
ibm_html_node <- read_html("http://www.ibm.com")
ibm_html_node
ibm_html_node
# Create a HTML node by loading a remote HTML page given a URL
ibm_html_node <- read_html("http://www.ibm.com")
ibm_html_node
# download the R home page and save it to an HTML file locally called r.html
download.file('https://www.r-project.org', destfile = 'r.html')
html_node
# Create a html_node from the local r.html file
html_node <- read_html('r.html')
html_node
html_node
body_node <- html_node(root_node, "body")
body_node
p_node <- html_node(body_node, "p")
p_content<-html_text(p_node)
p_content
simple_html_text <- "
<html>
<body>
<p style=\"color:red;\">This is a test html page</p>
</body>
</html>"
ibm_html_node <- read_html("http://www.ibm.com")
ibm_html_node
body_node <- html_node(root_node, "body")
body_node
p_node <- html_node(body_node, "p")
p_content<-html_text(p_node)
p_content
# Use the p_node as the first argument to get its attribute
style_attr <- html_attr(p_node, "style")
style_attr
url <- 'https://www.r-project.org'
html_node <- read_html('r.html')
# Get the image node using its root node
img_node <- html_node(html_node, "img")
# Get the "src" attribute of img node, representing the image location
img_relative_path <- html_attr(img_node, "src")
img_relative_path
# Paste img_relative_path with 'https://www.r-project.org'
image_path <- paste(url, img_relative_path, sep="")
# Use GET request to get the image
image_response<-GET(image_path)
# Use GET request to get the image
image_response<-GET(image_path)
image_path <- paste(url, img_relative_path, sep="")
# Use GET request to get the image
image_response<-GET(image_path)
# Parse the body from the response as bytes
image <- content(image_response, "raw")
# Write the bytes to a png file
writeBin(image, "r.png")
# Download table and use it as R data frame so we can analyze it using data frame-related operations
table_url <- "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DA0321EN-SkillsNetwork/labs/datasets/HTMLColorCodes.html"
table_node
root_node <-read_html(table_url)
table_node <- html_node(root_node, "table")
table_node
# Extract content from table_node and convert the data into a dataframe
color_data_frame <- html_table(table_node)
head(color_data_frame)
names(color_data_frame)
# Convert the first row as column names
names(color_data_frame) <- as.matrix(color_data_frame[1, ])
# Then remove the first row
data_frame <- color_data_frame[-1, ]
head(data_frame)
names(color_data_frame)
source("~/R_Tutorial/FileReadWriteOperations.R")
class(text)
str(text)
text
xl_data[c("User", "Email"), 2]
# using regexpr() and regmatches() to extract and match substrings
matched <- regexpr("@.*", c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"))
regmatches(c("anshuraj132@gmail.com", "farjimail.com", "vishal132@live.com", "vidyanshu.vishal@ymail.com"), matched)
source("~/R_Tutorial/Functions.R")
printHelloWorld
printHelloWorld()
as.character(10.3)
data(Nile)
help(Nile)
Nile
carData =mtcars
carData
data('mtcars')
carData =mtcars
carData
# Print top 5 values
head(carData)
# Use mutate() to add new columns
carData %>% mutate(cyltype = 'High')
install.packages(Tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
# Use mutate() to add new columns
carData %>% mutate(cyltype = 'High')
carData %>% mutate(wtton = wt*0.45)
carData %>% mutate(cyltype = ifelse(cyl>6, 'High', 'Low'))
# summarise() function to get mean
carData.new %>% summarise(mean(wtton))
head(carData.new, 5)
# summarise() function to get mean
carData.new %>% summarise(mean(wtton))
# Create a new data frame with the cyltype and wtton added
carData.new = carData %>% mutate(cyltype = ifelse(cyl >6, 'High', 'Low'), wtton = 0.45*wt)
head(carData.new, 5)
# summarise() function to get mean
carData.new %>% summarise(mean(wtton))
carData.new %>% summarise(median(wtton))
carData.new %>% summarise(mode(wtton))
# summarise() function to get mean, median & mode
carData.new %>% summarise(mean(wtton))
# Return the mean weight (in tons) and mean displacement of the cars
carData.new %>% summarise(mean(wtton), mean(disp))
# group_by() function is used to group samples according to features
# Group cars according to cyltype and calculate mean weight and mean displacement
carData.new %>% group_by(cyltype) %>% summarise(mean(wtton), mean(disp))
# group_by() function is used to group samples according to features
# Group cars according to cyltype and calculate mean weight and mean displacement
carData.new %>% group_by(cyltype) %>% summarise(mean(wtton), mean(disp))
# filter() function to retain data with specific condition
carData.new %>% filter (wtton > 2)
carData.new %>% filter(wtton > 2 & cyl > 4)
# select() function to select specific columns
carData %>% select(wtton)
# select() function to select specific columns
carData.new %>% select(wtton)
# select() function to select specific columns
carData.new %>% select(wtton, cyl)
carData.new %>% select(-wtton)
# GGPLOT with AES & GEOM_POINT to plot the graphs
carplot = ggplot(data = carData, aes(x = wt, y = disp)) + geom_point()
carplot
# Add labels and title
carplot = carplot + labs(x = 'Weight (lbs)', y = 'Displacement (cu. in.)', title = 'Weight vs. Displacement')
carplot
# Load the mpg dataset
data('mpg')
mpgData = mpg
mpgData
